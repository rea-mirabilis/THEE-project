#sel_coeffs = selective advantage of the genotypes over others. (has to be between 0 and 1) for 0.01 = low fitness, 0,2 = intermediate fitness,  0.5 = high fitness (should be bigger than decay rate for evolutionary rescue likelyness)
#mut_rate = mutation rate (>=0)
# setting the selective coeff of each genotype, order of RRRR RRRr RRrr Rrrr rrrr
#sel_coeffs = c(0.01,0.5,0.8,0.5,0.01)
# Function to simulate one generation for tetraploid genotypes
simulate_one_gen_tetraploid <- function(N_RRRR_new, N_RRRr_new, N_RRrr_new, N_Rrrr_new, N_rrrr_new, decay_rate, sel_coeffs, mut_rate) {
#computing total new population
total_new <- N_RRRR_new + N_RRRr_new + N_RRrr_new + N_Rrrr_new + N_rrrr_new
#calculate just the total gamete R and r
total_R <- (N_RRRR_new * 4 + N_RRRr_new * 3 + N_RRrr_new * 2 + N_Rrrr_new * 1)
total_r <- (N_rrrr_new * 4 + N_Rrrr_new * 3 + N_RRrr_new * 2 + N_RRRr_new * 1)
#and apply the mutation rate and then do the division
mut_R_to_r <- rpois(1, total_R * mut_rate)
mut_r_to_R <- rpois(1, total_r * mut_rate)
total_R_aftermut <- max(total_R + mut_r_to_R - mut_R_to_r, 0)
total_r_aftermut <- max(total_r + mut_R_to_r - mut_r_to_R, 0)
freq_p <- total_R_aftermut / (4 * total_new)
freq_q <- total_r_aftermut / (4 * total_new)
#hardy weinberg random mating
freq_RRRR <- (freq_p^4)
freq_RRRr <- (4 * freq_p^3 * freq_q)
freq_RRrr <- (6 * freq_p^2 * freq_q^2)
freq_Rrrr <- (4 * freq_q^3 * freq_p)
freq_rrrr <- (freq_q^4)
#return to "expected" by multiplying freq with the pops
offspring_total <- total_new
N_RRRR_new <- freq_RRRR * total_new
N_RRRr_new <- freq_RRRr * total_new
N_RRrr_new <- freq_RRrr * total_new
N_Rrrr_new <- freq_Rrrr * total_new
N_rrrr_new <- freq_rrrr * total_new
# Apply decay and selection coefficients for each genotype draw with rpois
offsp_RRRR <- rpois(1, N_RRRR_new * (1 - decay_rate + sel_coeffs[1]))
offsp_RRRr <- rpois(1, N_RRRr_new * (1 - decay_rate + sel_coeffs[2]))
offsp_RRrr <- rpois(1, N_RRrr_new * (1 - decay_rate + sel_coeffs[3]))
offsp_Rrrr <- rpois(1, N_Rrrr_new * (1 - decay_rate + sel_coeffs[4]))
offsp_rrrr <- rpois(1, N_rrrr_new * (1 - decay_rate + sel_coeffs[5]))
return(c(offsp_RRRR, offsp_RRRr, offsp_RRrr, offsp_Rrrr, offsp_rrrr))
}
# setting the numbers of the initial population
Init_RRRR = 100
Init_RRRr = 100
Init_RRrr = 100
Init_Rrrr = 100
Init_rrrr = 100
# test the function
print(simulate_one_gen_tetraploid(Init_RRRR, Init_RRRr, Init_RRrr, Init_Rrrr, Init_rrrr, 0.01, sel_coeffs, 0.01))
# Function to simulate multiple generations for tetraploid genotypes
simulate_pop_tetraploid <- function(N_init_RRRR, N_init_RRRr, N_init_RRrr, N_init_Rrrr, N_init_rrrr, decay_rate, sel_coeffs, mut_rate, t_max) {
#  #call sell_coeffs from the table
#  for (i in 1:nrow(sel_coeffs_table)) {
#  sel_coeffs <- sel_coeffs_table[i, ]
#  }
# Create a matrix to save population results
pop_matrix <- matrix(0, nrow = t_max + 1, ncol = 5)
colnames(pop_matrix) <- c("RRRR", "RRRr", "RRrr", "Rrrr", "rrrr")
pop_matrix[1,] <- c(N_init_RRRR, N_init_RRRr, N_init_RRrr, N_init_Rrrr, N_init_rrrr)
# Initialize the population for the first generation
pop_current <- c(N_init_RRRR, N_init_RRRr, N_init_RRrr, N_init_Rrrr, N_init_rrrr)
# Run the simulation for t_max generations
for (t in 1:t_max) {
pop_next <- simulate_one_gen_tetraploid(pop_current[1], pop_current[2], pop_current[3], pop_current[4], pop_current[5], decay_rate, sel_coeffs, mut_rate)
pop_matrix[t + 1,] <- pop_next
pop_current <- pop_next
# Early stop condition: if population drops to zero or exceeds a threshold
if (sum(pop_next) == 0 || sum(pop_next) >= 5 * sum(pop_matrix[1,])) {
break
}
}
return(pop_matrix)
}
# Parameters
decay_rate <- 0.175
#different s sel coeffs
#s = 0.1 low
mut_rate <- 0.08
t_max <- 100
# Initial population sizes for each genotype
N_init_RRRR <- 0
N_init_RRRr <- 0
N_init_RRrr <- 0
N_init_Rrrr <- 0
N_init_rrrr <- 1000
# Run the simulation and store the output
pop_result <- simulate_pop_tetraploid(N_init_RRRR, N_init_RRRr, N_init_RRrr, N_init_Rrrr, N_init_rrrr, decay_rate, sel_coeffs, mut_rate, t_max)
print(pop_result)
# Plot the results
x_range <- 0:(nrow(pop_result) - 1)
plot(x_range, rowSums(pop_result), type='l', ylim=c(0, max(rowSums(pop_result))), xlab="Generation", ylab="Population Size", col="black")
lines(x_range, pop_result[,1], col="blue", lty=1)  # RRRR
lines(x_range, pop_result[,2], col="red", lty=2)   # RRRr
lines(x_range, pop_result[,3], col="green", lty=3) # RRrr
lines(x_range, pop_result[,4], col="purple", lty=4)# Rrrr
lines(x_range, pop_result[,5], col="orange", lty=5)# rrrr
legend("topright", legend=c("RRRR", "RRRr", "RRrr", "Rrrr", "rrrr"), col=c("blue", "red", "green", "purple", "orange"), lty=1:5)
create_sel_coeffs <- function(s_number, biggest_S, r, inc) {
sel_coeffs_table <- matrix(0, nrow = s_number + 1, ncol = 5)
colnames(sel_coeffs_table) <- c("sc_low", "sc_medium", "sc_high", "sc_medium", "sc_low")
s <- 0
sc_current <- c(1-r, 1-r + s/2, 1-r + s , 1-r + s/2, 1-r)
# Run the table creation
for (i in 1:s_number + 1) {
sc_next <- c(1-r, 1-r + s/2, 1-r + s , 1-r + s/2, 1-r)
sel_coeffs_table[i,] <- sc_next
sc_current <- sc_next
#growing s by increment(inc) we set until it's too big
if (s <= biggest_S) {
s <- (s + inc)
}
}
return(sel_coeffs_table)
}
print(create_sel_coeffs(s_number = 20, biggest_S = 3, r=0.9, inc = 0.05))
#create the table to use later
seltable <- create_sel_coeffs(s_number = 20, biggest_S = 3, r=0.9, inc = 0.05)
print(seltable[3,])
#the down you go in the table the more heterozygote advantage you have.
# set some parameters to fixed values
init_RRRR <- 0
init_RRRr <- 0
init_RRrr <- 0
init_Rrrr <- 0
init_rrrr <- 1000
m_rate <- 0.01
max_gen <- 1000
decay_rate <- 0.175
# determine how often to run the simulation for each set of parameters
replicates <- 1
#call the seltable here.
seltable <- create_sel_coeffs(s_number = 20, biggest_S = 3, r=0.9, inc = 0.05)
# initialize vector - where to collect the probablitys
pr <- numeric(nrow(seltable))
# run the simulation across all chosen parameters
# loop over sel coefs
for(i in 1:nrow(seltable)){
# loop over selection coefficients
sel_coeffs <- seltable[i, ]
j<-1
repeat {
# increase counter by one
success<- 0
# run the simulation once
first_run <- simulate_pop_tetraploid(N_init_RRRR, N_init_RRRr, N_init_RRrr, N_init_Rrrr, N_init_rrrr, decay_rate, sel_coeffs, mut_rate, t_max)
print(head(first_run))
# determine if the population survived
total_pop_in_the_end = rowsums(first_run)
if(total_pop_in_the_end[nrow(first_run)] != 0 )
success = success+1
pr[i] = success/replicates
if(j>replicates) break
}
}
# set some parameters to fixed values
init_RRRR <- 0
init_RRRr <- 0
init_RRrr <- 0
init_Rrrr <- 0
init_rrrr <- 1000
m_rate <- 0.01
max_gen <- 1000
decay_rate <- 0.175
# determine how often to run the simulation for each set of parameters
replicates <- 1
library("diplyr")
# set some parameters to fixed values
init_RRRR <- 0
init_RRRr <- 0
init_RRrr <- 0
init_Rrrr <- 0
init_rrrr <- 1000
m_rate <- 0.01
max_gen <- 1000
decay_rate <- 0.175
# determine how often to run the simulation for each set of parameters
replicates <- 1
library("dplyr")
#call the seltable here.
seltable <- create_sel_coeffs(s_number = 20, biggest_S = 3, r=0.9, inc = 0.05)
# initialize vector - where to collect the probablitys
pr <- numeric(nrow(seltable))
# run the simulation across all chosen parameters
# loop over sel coefs
for(i in 1:nrow(seltable)){
# loop over selection coefficients
sel_coeffs <- seltable[i, ]
j<-1
repeat {
# increase counter by one
success<- 0
# run the simulation once
first_run <- simulate_pop_tetraploid(N_init_RRRR, N_init_RRRr, N_init_RRrr, N_init_Rrrr, N_init_rrrr, decay_rate, sel_coeffs, mut_rate, t_max)
print(head(first_run))
# determine if the population survived
total_pop_in_the_end = rowsums(first_run)
if(total_pop_in_the_end[nrow(first_run)] != 0 )
success = success+1
pr[i] = success/replicates
if(j>replicates) break
}
}
# set some parameters to fixed values
init_RRRR <- 0
init_RRRr <- 0
init_RRrr <- 0
init_Rrrr <- 0
init_rrrr <- 1000
m_rate <- 0.01
max_gen <- 1000
decay_rate <- 0.175
# determine how often to run the simulation for each set of parameters
replicates <- 1
install.packages("dplyr")
library("dplyr")
#call the seltable here.
seltable <- create_sel_coeffs(s_number = 20, biggest_S = 3, r=0.9, inc = 0.05)
# initialize vector - where to collect the probablitys
pr <- numeric(nrow(seltable))
# run the simulation across all chosen parameters
# loop over sel coefs
for(i in 1:nrow(seltable)){
# loop over selection coefficients
sel_coeffs <- seltable[i, ]
j<-1
repeat {
# increase counter by one
success<- 0
# run the simulation once
first_run <- simulate_pop_tetraploid(N_init_RRRR, N_init_RRRr, N_init_RRrr, N_init_Rrrr, N_init_rrrr, decay_rate, sel_coeffs, mut_rate, t_max)
print(head(first_run))
# determine if the population survived
total_pop_in_the_end = rowsums(first_run)
if(total_pop_in_the_end[nrow(first_run)] != 0 )
success = success+1
pr[i] = success/replicates
if(j>replicates) break
}
}
install.packages("dplyr")
# set some parameters to fixed values
init_RRRR <- 0
init_RRRr <- 0
init_RRrr <- 0
init_Rrrr <- 0
init_rrrr <- 1000
m_rate <- 0.01
max_gen <- 1000
decay_rate <- 0.175
# determine how often to run the simulation for each set of parameters
replicates <- 1
#call the seltable here.
seltable <- create_sel_coeffs(s_number = 20, biggest_S = 3, r=0.9, inc = 0.05)
# initialize vector - where to collect the probablitys
pr <- numeric(nrow(seltable))
# run the simulation across all chosen parameters
# loop over sel coefs
for(i in 1:nrow(seltable)){
# loop over selection coefficients
sel_coeffs <- seltable[i, ]
j<-1
repeat {
# increase counter by one
success<- 0
# run the simulation once
first_run <- simulate_pop_tetraploid(N_init_RRRR, N_init_RRRr, N_init_RRrr, N_init_Rrrr, N_init_rrrr, decay_rate, sel_coeffs, mut_rate, t_max)
print(head(first_run))
# determine if the population survived
total_pop_in_the_end = first_run[,1] + first_run[,2] + first_run[,3]
if(total_pop_in_the_end[nrow(first_run)] != 0 )
success = success+1
pr[i] = success/replicates
if(j>replicates) break
}
}
create_sel_coeffs <- function(s_number, biggest_S, r, inc) {
sel_coeffs_table <- matrix(0, nrow = s_number + 1, ncol = 5)
colnames(sel_coeffs_table) <- c("sc_low", "sc_medium", "sc_high", "sc_medium", "sc_low")
s <- 0
sc_current <- c(0,s/2, s ,s/2, 0)
# Run the table creation
for (i in 1:s_number + 1) {
sc_next <- c(0,s/2, s ,s/2, 0)
sel_coeffs_table[i,] <- sc_next
sc_current <- sc_next
#growing s by increment(inc) we set until it's too big
if (s <= biggest_S) {
s <- (s + inc)
}
}
return(sel_coeffs_table)
}
print(create_sel_coeffs(s_number = 20, biggest_S = 3, inc = 0.05))
#create the table to use later
seltable <- create_sel_coeffs(s_number = 20, biggest_S = 3, inc = 0.05)
print(seltable[3,])
#the down you go in the table the more heterozygote advantage you have.
create_sel_coeffs <- function(s_number, biggest_S, decay_rate, inc) {
sel_coeffs_table <- matrix(0, nrow = s_number + 1, ncol = 5)
colnames(sel_coeffs_table) <- c("sc_low", "sc_medium", "sc_high", "sc_medium", "sc_low")
s <- decay_rate
sc_current <- c(0,s/2, s ,s/2, 0)
# Run the table creation
for (i in 1:s_number + 1) {
sc_next <- c(0,s/2, s ,s/2, 0)
sel_coeffs_table[i,] <- sc_next
sc_current <- sc_next
#growing s by increment(inc) we set until it's too big
if (s <= biggest_S) {
s <- (s + inc)
}
}
return(sel_coeffs_table)
}
print(create_sel_coeffs(s_number = 20, biggest_S = 3, inc = 0.05))
create_sel_coeffs <- function(s_number, biggest_S, inc) {
sel_coeffs_table <- matrix(0, nrow = s_number + 1, ncol = 5)
colnames(sel_coeffs_table) <- c("sc_low", "sc_medium", "sc_high", "sc_medium", "sc_low")
sc_current <- c(0,s/2, s ,s/2, 0)
# Run the table creation
for (i in 1:s_number + 1) {
sc_next <- c(0,s/2, s ,s/2, 0)
sel_coeffs_table[i,] <- sc_next
sc_current <- sc_next
#growing s by increment(inc) we set until it's too big
if (s <= biggest_S) {
s <- (s + inc)
}
}
return(sel_coeffs_table)
}
print(create_sel_coeffs(s_number = 20, biggest_S = 3, inc = 0.05))
create_sel_coeffs <- function(s_number, biggest_S, inc) {
sel_coeffs_table <- matrix(0, nrow = s_number + 1, ncol = 5)
colnames(sel_coeffs_table) <- c("sc_low", "sc_medium", "sc_high", "sc_medium", "sc_low")
s <- 0
sc_current <- c(0,s/2, s ,s/2, 0)
# Run the table creation
for (i in 1:s_number + 1) {
sc_next <- c(0,s/2, s ,s/2, 0)
sel_coeffs_table[i,] <- sc_next
sc_current <- sc_next
#growing s by increment(inc) we set until it's too big
if (s <= biggest_S) {
s <- (s + inc)
}
}
return(sel_coeffs_table)
}
print(create_sel_coeffs(s_number = 20, biggest_S = 3, inc = 0.05))
#create the table to use later
seltable <- create_sel_coeffs(s_number = 20, biggest_S = 3, inc = 0.05)
print(seltable[3,])
#the down you go in the table the more heterozygote advantage you have.
create_sel_coeffs <- function(s_number, biggest_S, inc) {
sel_coeffs_table <- matrix(0, nrow = s_number + 1, ncol = 5)
colnames(sel_coeffs_table) <- c("sc_low", "sc_medium", "sc_high", "sc_medium", "sc_low")
s <- 0.05
sc_current <- c(0,s/2, s ,s/2, 0)
# Run the table creation
for (i in 1:s_number + 1) {
sc_next <- c(0,s/2, s ,s/2, 0)
sel_coeffs_table[i,] <- sc_next
sc_current <- sc_next
#growing s by increment(inc) we set until it's too big
if (s <= biggest_S) {
s <- (s + inc)
}
}
return(sel_coeffs_table)
}
print(create_sel_coeffs(s_number = 20, biggest_S = 3, inc = 0.05))
#create the table to use later
seltable <- create_sel_coeffs(s_number = 20, biggest_S = 3, inc = 0.05)
print(seltable[3,])
#the down you go in the table the more heterozygote advantage you have.
create_sel_coeffs <- function(s_number, biggest_S, inc) {
sel_coeffs_table <- matrix(0, nrow = s_number + 1, ncol = 5)
colnames(sel_coeffs_table) <- c("sc_low", "sc_medium", "sc_high", "sc_medium", "sc_low")
s <- 0.18
sc_current <- c(0,s/2, s ,s/2, 0)
# Run the table creation
for (i in 1:s_number + 1) {
sc_next <- c(0,s/2, s ,s/2, 0)
sel_coeffs_table[i,] <- sc_next
sc_current <- sc_next
#growing s by increment(inc) we set until it's too big
if (s <= biggest_S) {
s <- (s + inc)
}
}
return(sel_coeffs_table)
}
print(create_sel_coeffs(s_number = 20, biggest_S = 3, inc = 0.05))
#create the table to use later
seltable <- create_sel_coeffs(s_number = 20, biggest_S = 3, inc = 0.05)
print(seltable[3,])
#the down you go in the table the more heterozygote advantage you have.
# set some parameters to fixed values
init_RRRR <- 0
init_RRRr <- 0
init_RRrr <- 0
init_Rrrr <- 0
init_rrrr <- 1000
m_rate <- 0.01
max_gen <- 1000
decay_rate <- 0.175
# determine how often to run the simulation for each set of parameters
replicates <- 1
#call the seltable here.
seltable <- create_sel_coeffs(s_number = 20, biggest_S = 3, r=0.9, inc = 0.05)
# set some parameters to fixed values
init_RRRR <- 0
init_RRRr <- 0
init_RRrr <- 0
init_Rrrr <- 0
init_rrrr <- 1000
m_rate <- 0.01
max_gen <- 1000
decay_rate <- 0.175
# determine how often to run the simulation for each set of parameters
replicates <- 1
#call the seltable here.
seltable <- create_sel_coeffs(s_number = 20, biggest_S = 3, inc = 0.05)
# initialize vector - where to collect the probablitys
pr <- numeric(nrow(seltable))
# run the simulation across all chosen parameters
# loop over sel coefs
for(i in 1:nrow(seltable)){
# loop over selection coefficients
sel_coeffs <- seltable[i, ]
j<-1
repeat {
# increase counter by one
success<- 0
# run the simulation once
first_run <- simulate_pop_tetraploid(N_init_RRRR, N_init_RRRr, N_init_RRrr, N_init_Rrrr, N_init_rrrr, decay_rate, sel_coeffs, mut_rate, t_max)
# determine if the population survived
total_pop_in_the_end = first_run[,1] + first_run[,2] + first_run[,3]
if(total_pop_in_the_end[nrow(first_run)] != 0 )
success = success+1
pr[i] = success/replicates
if(j>replicates) break
}
}
# set some parameters to fixed values
init_RRRR <- 0
init_RRRr <- 0
init_RRrr <- 0
init_Rrrr <- 0
init_rrrr <- 1000
m_rate <- 0.01
max_gen <- 1000
decay_rate <- 0.175
# determine how often to run the simulation for each set of parameters
replicates <- 1
#call the seltable here.
seltable <- create_sel_coeffs(s_number = 3, biggest_S = 3, inc = 0.05)
# initialize vector - where to collect the probablitys
pr <- numeric(nrow(seltable))
# run the simulation across all chosen parameters
# loop over sel coefs
for(i in 1:nrow(seltable)){
# loop over selection coefficients
sel_coeffs <- seltable[i, ]
j<-1
repeat {
# increase counter by one
success<- 0
# run the simulation once
first_run <- simulate_pop_tetraploid(N_init_RRRR, N_init_RRRr, N_init_RRrr, N_init_Rrrr, N_init_rrrr, decay_rate, sel_coeffs, mut_rate, t_max)
# determine if the population survived
total_pop_in_the_end = first_run[,1] + first_run[,2] + first_run[,3]
if(total_pop_in_the_end[nrow(first_run)] != 0 )
success = success+1
pr[i] = success/replicates
if(j>replicates) break
}
}
# set some parameters to fixed values
init_RRRR <- 0
init_RRRr <- 0
init_RRrr <- 0
init_Rrrr <- 0
init_rrrr <- 1000
m_rate <- 0.01
max_gen <- 1000
decay_rate <- 0.175
# determine how often to run the simulation for each set of parameters
replicates <- 1
#call the seltable here.
seltable <- create_sel_coeffs(s_number = 3, biggest_S = 3, inc = 0.05)
# initialize vector - where to collect the probablitys
pr <- numeric(nrow(seltable))
# run the simulation across all chosen parameters
# loop over sel coefs
for(i in 1:nrow(seltable)){
# loop over selection coefficients
sel_coeffs <- seltable[i, ]
j<-1
repeat {
j <- j+1
# increase counter by one
success<- 0
# run the simulation once
first_run <- simulate_pop_tetraploid(N_init_RRRR, N_init_RRRr, N_init_RRrr, N_init_Rrrr, N_init_rrrr, decay_rate, sel_coeffs, mut_rate, t_max)
# determine if the population survived
total_pop_in_the_end = first_run[,1] + first_run[,2] + first_run[,3]+ first_run[,4] + first_run[,5]
if(total_pop_in_the_end[nrow(first_run)] != 0 )
success = success+1
pr[i] = success/replicates
if(j>replicates) break
}
}
