# Draw again 5 (pseudo)random numbers from a normal distribution
rnorm(5)
rnorm(5)
#initialize the seed of the pseudo random generator
set.seed(1)
# Draw 5 (pseudo)random numbers from a normal distribution
rnorm(5)
#initialize the seed of the pseudo random generator
set.seed(1)
# Draw again 5 (pseudo)random numbers from a normal distribution
rnorm(5)
rnorm(5)
rnorm(5)
#initialize the seed of the pseudo random generator
set.seed(1)
# Draw 5 (pseudo)random numbers from a normal distribution
rnorm(5)
#initialize the seed of the pseudo random generator
set.seed(1)
# Draw again 5 (pseudo)random numbers from a normal distribution
rnorm(5)
rnorm(5)
rnorm(5)
#initialize the seed of the pseudo random generator
set.seed(2)
# Draw 5 (pseudo)random numbers from a normal distribution
rnorm(5)
#initialize the seed of the pseudo random generator
set.seed(2)
# Draw again 5 (pseudo)random numbers from a normal distribution
rnorm(5)
rnorm(5)
rnorm(5)
#initialize the seed of the pseudo random generator
set.seed(1)
# Draw 5 (pseudo)random numbers from a normal distribution
rnorm(5)
#initialize the seed of the pseudo random generator
set.seed(1)
# Draw again 5 (pseudo)random numbers from a normal distribution
rnorm(5)
rnorm(5)
rnorm(5)
set.seed(5)
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 1000
# create your simulation data
output <- simulate_pop(1000,0,0.1,0.2,0.001,max_gen)
simulate_one_gen <- function(N_a, N_A, decay_rate, sel_coeff, mut_rate) {
# draw offspring according to Poisson distribution
offsp_a <- rpois(1, N_a * (1-decay_rate))
offsp_A <- rpois(1, N_A * (1-decay_rate+sel_coeff))
# draw new mutants according to Poisson distribution
mut_a_to_A <- rpois(1, offsp_a * mut_rate)
# determine new population sizes of wild type and mutant
N_a_new <- max(offsp_a - mut_a_to_A, 0)
N_A_new <-  offsp_A + mut_a_to_A
return(c(N_a_new, N_A_new))
}
# Test the function
print(simulate_one_gen(100,0,0.1,0.2,0.01))
set.seed(5)
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 1000
# create your simulation data
output <- simulate_pop(1000,0,0.1,0.2,0.001,max_gen)
# show the last few lines of the data table
print(tail(output))
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
set.seed(5)
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 1000
# create your simulation data
output <- simulate_pop(1000,0,0.1,0.2,0.001,max_gen)
# show the last few lines of the data table
print(tail(output))
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
#set.seed(5)
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 1000
# create your simulation data
output <- simulate_pop(1000,0,0.1,0.2,0.001,max_gen)
# show the last few lines of the data table
print(tail(output))
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
#set.seed(5)
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 1000
# create your simulation data
output <- simulate_pop(1000,0,0.1,0.2,0.001,max_gen)
# show the last few lines of the data table
print(tail(output))
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
set.seed(3)
simulate_pop <- function(N_init_a, N_init_A, decay_rate, sel_coeff, mut_rate, t_max) {
# Create the vector in which to save the results
pop_vector <- c(N_init_a, N_init_A)
# initiate the variables
pop_new <- c(N_init_a, N_init_A)
# run the simulation until generation t_max
for (i in 1:t_max+1) {
# redefine the current population one generation later
pop_new <- simulate_one_gen(pop_new[1],pop_new[2], decay_rate, sel_coeff, mut_rate)
# add the new population sizes to the output vector
pop_vector <- rbind(pop_vector,pop_new)
# condition to stop the simulation before t_max: either the population exceeds 1.5 times the original population size, or it goes extinct
if (pop_new[1]+pop_new[2]>=1.5*(N_init_a+ N_init_A) | pop_new[1]+pop_new[2]==0) break
}
# define the row and column names of the output vector
rownames(pop_vector) <- (0:t_max)[1:length(pop_vector[,1])] # note that the vector has to be cut if the simulation stopped early
colnames(pop_vector) <- c("a","A")
# return the result
return(pop_vector)
}
# Test the function and plot the result
# set t_max to a value to be used througout
max_gen <- 1000
# create your simulation data
output <- simulate_pop(1000,0,0.1,0.2,0.001,max_gen)
# show the last few lines of the data table
print(tail(output))
# plot the output - note that the plot range and the x axis have to be adjusted based on the length of the table
# determine x axis range
x_range <- 0:(length(output[,1])-1)
# this plots the total population size
plot(x_range,output[,1]+output[,2],type='l',ylim=c(0,max(output[,1]+output[,2])),xlab = "Generation",ylab = "Population size")
# add number of wild type individuals
lines(x_range,output[,1], col="blue")
# add number of mutant individuals
lines(x_range,output[,2], col="red")
# Define initial population sizes for each genotype
N_RRRR <- 100    # Initial number of RRRR individuals
N_RRRr <- 100    # Initial number of RRRr individuals
N_RRrr <- 100    # Initial number of RRrr individuals
N_Rrrr <- 100    # Initial number of Rrrr individuals
N_rrrr <- 100    # Initial number of rrrr individuals
# Define selection strengths for each genotype
s_RRRR <- 0.01
s_RRRr <- 0.8
s_RRrr <- 1
s_Rrrr <- 0.8
s_rrrr <- 0.01
# Define herbicide pressure (decay rate)
h <- 0.05  # e.g., a 5% decay per generation due to herbicide
# Maximum number of generations
T_max <- 50
# Storage for tracking population changes over time
populations <- matrix(0, nrow = T_max, ncol = 5)
colnames(populations) <- c("RRRR", "RRRr", "RRrr", "Rrrr", "rrrr")
# Store initial population sizes
populations[1, ] <- c(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr)
# Function to simulate one generation
update_population <- function(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr, s_RRRR, s_RRRr, s_RRrr, s_Rrrr, s_rrrr, h) {
# Apply selection and herbicide pressure (decay)
N_RRRR <- N_RRRR * (s_RRRR - h)
N_RRRr <- N_RRRr * (s_RRRr - h)
N_RRrr <- N_RRrr * (s_RRrr - h)
N_Rrrr <- N_Rrrr * (s_Rrrr - h)
N_rrrr <- N_rrrr * (s_rrrr - h)
# Ensure population sizes don't go negative
N_RRRR <- max(N_RRRR, 0)
N_RRRr <- max(N_RRRr, 0)
N_RRrr <- max(N_RRrr, 0)
N_Rrrr <- max(N_Rrrr, 0)
N_rrrr <- max(N_rrrr, 0)
return(c(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr))
}
# Simulate for T_max generations
for (t in 2:T_max) {
populations[t, ] <- update_population(
populations[t-1, "RRRR"], populations[t-1, "RRRr"], populations[t-1, "RRrr"],
populations[t-1, "Rrrr"], populations[t-1, "rrrr"],
s_RRRR, s_RRRr, s_RRrr, s_Rrrr, s_rrrr, h)
}
# Plot the population changes over time
matplot(1:T_max, populations, type = "l", lty = 1, col = 1:5, lwd = 2,
xlab = "Generation", ylab = "Population Size",
main = "Population Dynamics of Genotypes Under Herbicide Pressure")
legend("topright", legend = colnames(populations), col = 1:5, lwd = 2)
# Define initial population sizes for each genotype
N_RRRR <- 100    # Initial number of RRRR individuals
N_RRRr <- 100    # Initial number of RRRr individuals
N_RRrr <- 100    # Initial number of RRrr individuals
N_Rrrr <- 100    # Initial number of Rrrr individuals
N_rrrr <- 100    # Initial number of rrrr individuals
# Define selection strengths for each genotype
s_RRRR <- 0.01
s_RRRr <- 0.8
s_RRrr <- 1
s_Rrrr <- 0.8
s_rrrr <- 0.01
# Define herbicide pressure (decay rate)
h <- 0.05  # e.g., a 5% decay per generation due to herbicide
# Maximum number of generations
T_max <- 100
# Storage for tracking population changes over time
populations <- matrix(0, nrow = T_max, ncol = 5)
colnames(populations) <- c("RRRR", "RRRr", "RRrr", "Rrrr", "rrrr")
# Store initial population sizes
populations[1, ] <- c(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr)
# Function to simulate one generation
update_population <- function(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr, s_RRRR, s_RRRr, s_RRrr, s_Rrrr, s_rrrr, h) {
# Apply selection and herbicide pressure (decay)
N_RRRR <- N_RRRR * (s_RRRR - h)
N_RRRr <- N_RRRr * (s_RRRr - h)
N_RRrr <- N_RRrr * (s_RRrr - h)
N_Rrrr <- N_Rrrr * (s_Rrrr - h)
N_rrrr <- N_rrrr * (s_rrrr - h)
# Ensure population sizes don't go negative
N_RRRR <- max(N_RRRR, 0)
N_RRRr <- max(N_RRRr, 0)
N_RRrr <- max(N_RRrr, 0)
N_Rrrr <- max(N_Rrrr, 0)
N_rrrr <- max(N_rrrr, 0)
return(c(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr))
}
# Simulate for T_max generations
for (t in 2:T_max) {
populations[t, ] <- update_population(
populations[t-1, "RRRR"], populations[t-1, "RRRr"], populations[t-1, "RRrr"],
populations[t-1, "Rrrr"], populations[t-1, "rrrr"],
s_RRRR, s_RRRr, s_RRrr, s_Rrrr, s_rrrr, h)
}
# Plot the population changes over time
matplot(1:T_max, populations, type = "l", lty = 1, col = 1:5, lwd = 2,
xlab = "Generation", ylab = "Population Size",
main = "Population Dynamics of Genotypes Under Herbicide Pressure")
legend("topright", legend = colnames(populations), col = 1:5, lwd = 2)
# Define initial population sizes for each genotype
N_RRRR <- 100    # Initial number of RRRR individuals
N_RRRr <- 100    # Initial number of RRRr individuals
N_RRrr <- 100    # Initial number of RRrr individuals
N_Rrrr <- 100    # Initial number of Rrrr individuals
N_rrrr <- 100    # Initial number of rrrr individuals
# Define selection strengths for each genotype
s_RRRR <- 0.01
s_RRRr <- 0.8
s_RRrr <- 1
s_Rrrr <- 0.8
s_rrrr <- 0.01
# Define herbicide pressure (decay rate)
h <- 0.01  # e.g., a 5% decay per generation due to herbicide
# Maximum number of generations
T_max <- 100
# Storage for tracking population changes over time
populations <- matrix(0, nrow = T_max, ncol = 5)
colnames(populations) <- c("RRRR", "RRRr", "RRrr", "Rrrr", "rrrr")
# Store initial population sizes
populations[1, ] <- c(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr)
# Function to simulate one generation
update_population <- function(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr, s_RRRR, s_RRRr, s_RRrr, s_Rrrr, s_rrrr, h) {
# Apply selection and herbicide pressure (decay)
N_RRRR <- N_RRRR * (s_RRRR - h)
N_RRRr <- N_RRRr * (s_RRRr - h)
N_RRrr <- N_RRrr * (s_RRrr - h)
N_Rrrr <- N_Rrrr * (s_Rrrr - h)
N_rrrr <- N_rrrr * (s_rrrr - h)
# Ensure population sizes don't go negative
N_RRRR <- max(N_RRRR, 0)
N_RRRr <- max(N_RRRr, 0)
N_RRrr <- max(N_RRrr, 0)
N_Rrrr <- max(N_Rrrr, 0)
N_rrrr <- max(N_rrrr, 0)
return(c(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr))
}
# Simulate for T_max generations
for (t in 2:T_max) {
populations[t, ] <- update_population(
populations[t-1, "RRRR"], populations[t-1, "RRRr"], populations[t-1, "RRrr"],
populations[t-1, "Rrrr"], populations[t-1, "rrrr"],
s_RRRR, s_RRRr, s_RRrr, s_Rrrr, s_rrrr, h)
}
# Plot the population changes over time
matplot(1:T_max, populations, type = "l", lty = 1, col = 1:5, lwd = 2,
xlab = "Generation", ylab = "Population Size",
main = "Population Dynamics of Genotypes Under Herbicide Pressure")
legend("topright", legend = colnames(populations), col = 1:5, lwd = 2)
# Define initial population sizes for each genotype
N_RRRR <- 100    # Initial number of RRRR individuals
N_RRRr <- 100    # Initial number of RRRr individuals
N_RRrr <- 100    # Initial number of RRrr individuals
N_Rrrr <- 100    # Initial number of Rrrr individuals
N_rrrr <- 100    # Initial number of rrrr individuals
# Define selection strengths for each genotype
s_RRRR <- 0.01
s_RRRr <- 0.8
s_RRrr <- 1
s_Rrrr <- 0.8
s_rrrr <- 0.01
# Define herbicide pressure (decay rate)
h <- 0.001  # e.g., a 5% decay per generation due to herbicide
# Maximum number of generations
T_max <- 100
# Storage for tracking population changes over time
populations <- matrix(0, nrow = T_max, ncol = 5)
colnames(populations) <- c("RRRR", "RRRr", "RRrr", "Rrrr", "rrrr")
# Store initial population sizes
populations[1, ] <- c(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr)
# Function to simulate one generation
update_population <- function(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr, s_RRRR, s_RRRr, s_RRrr, s_Rrrr, s_rrrr, h) {
# Apply selection and herbicide pressure (decay)
N_RRRR <- N_RRRR * (s_RRRR - h)
N_RRRr <- N_RRRr * (s_RRRr - h)
N_RRrr <- N_RRrr * (s_RRrr - h)
N_Rrrr <- N_Rrrr * (s_Rrrr - h)
N_rrrr <- N_rrrr * (s_rrrr - h)
# Ensure population sizes don't go negative
N_RRRR <- max(N_RRRR, 0)
N_RRRr <- max(N_RRRr, 0)
N_RRrr <- max(N_RRrr, 0)
N_Rrrr <- max(N_Rrrr, 0)
N_rrrr <- max(N_rrrr, 0)
return(c(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr))
}
# Simulate for T_max generations
for (t in 2:T_max) {
populations[t, ] <- update_population(
populations[t-1, "RRRR"], populations[t-1, "RRRr"], populations[t-1, "RRrr"],
populations[t-1, "Rrrr"], populations[t-1, "rrrr"],
s_RRRR, s_RRRr, s_RRrr, s_Rrrr, s_rrrr, h)
}
# Plot the population changes over time
matplot(1:T_max, populations, type = "l", lty = 1, col = 1:5, lwd = 2,
xlab = "Generation", ylab = "Population Size",
main = "Population Dynamics of Genotypes Under Herbicide Pressure")
legend("topright", legend = colnames(populations), col = 1:5, lwd = 2)
# Define initial population sizes for each genotype
N_RRRR <- 1000    # Initial number of RRRR individuals
N_RRRr <- 0    # Initial number of RRRr individuals
N_RRrr <- 0    # Initial number of RRrr individuals
N_Rrrr <- 00    # Initial number of Rrrr individuals
N_rrrr <- 1000    # Initial number of rrrr individuals
# Define selection strengths for each genotype
s_RRRR <- 0.01
s_RRRr <- 0.8
s_RRrr <- 1
s_Rrrr <- 0.8
s_rrrr <- 0.01
# Define herbicide pressure (decay rate)
h <- 0.001  # e.g., a 5% decay per generation due to herbicide
# Maximum number of generations
T_max <- 100
# Storage for tracking population changes over time
populations <- matrix(0, nrow = T_max, ncol = 5)
colnames(populations) <- c("RRRR", "RRRr", "RRrr", "Rrrr", "rrrr")
# Store initial population sizes
populations[1, ] <- c(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr)
# Function to simulate one generation
update_population <- function(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr, s_RRRR, s_RRRr, s_RRrr, s_Rrrr, s_rrrr, h) {
# Apply selection and herbicide pressure (decay)
N_RRRR <- N_RRRR * (s_RRRR - h)
N_RRRr <- N_RRRr * (s_RRRr - h)
N_RRrr <- N_RRrr * (s_RRrr - h)
N_Rrrr <- N_Rrrr * (s_Rrrr - h)
N_rrrr <- N_rrrr * (s_rrrr - h)
# Ensure population sizes don't go negative
N_RRRR <- max(N_RRRR, 0)
N_RRRr <- max(N_RRRr, 0)
N_RRrr <- max(N_RRrr, 0)
N_Rrrr <- max(N_Rrrr, 0)
N_rrrr <- max(N_rrrr, 0)
return(c(N_RRRR, N_RRRr, N_RRrr, N_Rrrr, N_rrrr))
}
# Simulate for T_max generations
for (t in 2:T_max) {
populations[t, ] <- update_population(
populations[t-1, "RRRR"], populations[t-1, "RRRr"], populations[t-1, "RRrr"],
populations[t-1, "Rrrr"], populations[t-1, "rrrr"],
s_RRRR, s_RRRr, s_RRrr, s_Rrrr, s_rrrr, h)
}
# Plot the population changes over time
matplot(1:T_max, populations, type = "l", lty = 1, col = 1:5, lwd = 2,
xlab = "Generation", ylab = "Population Size",
main = "Population Dynamics of Genotypes Under Herbicide Pressure")
legend("topright", legend = colnames(populations), col = 1:5, lwd = 2)
